!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
add	/home/daniil/projects/my/bump/src/bump_git.erl	/^add(File, Dir) ->$/;"	f	language:Erlang	module:bump_git
bump	/home/daniil/projects/my/bump/src/bump.erl	/^bump(Module, State, Fun) ->$/;"	f	language:Erlang
bump_git	/home/daniil/projects/my/bump/src/bump_git.erl	/^-module(bump_git).$/;"	m	language:Erlang
bump_prv	/home/daniil/projects/my/bump/src/bump_prv.erl	/^-module(bump_prv).$/;"	m	language:Erlang
bump_rebar	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^-module(bump_rebar).$/;"	m	language:Erlang
commit	/home/daniil/projects/my/bump/src/bump_git.erl	/^commit(Message, Dir) ->$/;"	f	language:Erlang	module:bump_git
DEPS	/home/daniil/projects/my/bump/src/bump_prv.erl	/^-define(DEPS, [app_discovery]).$/;"	d	language:Erlang
DEPS	/home/daniil/projects/my/bump/src/major_prv.erl	/^-define(DEPS, []).$/;"	d	language:Erlang
DEPS	/home/daniil/projects/my/bump/src/minor_prv.erl	/^-define(DEPS, []).$/;"	d	language:Erlang
DEPS	/home/daniil/projects/my/bump/src/patch_prv.erl	/^-define(DEPS, []).$/;"	d	language:Erlang
do	/home/daniil/projects/my/bump/src/bump_prv.erl	/^do(State) ->$/;"	f	language:Erlang	module:bump_prv
do	/home/daniil/projects/my/bump/src/major_prv.erl	/^do(State) ->$/;"	f	language:Erlang	module:major_prv
do	/home/daniil/projects/my/bump/src/minor_prv.erl	/^do(State) ->$/;"	f	language:Erlang	module:minor_prv
do	/home/daniil/projects/my/bump/src/patch_prv.erl	/^do(State) ->$/;"	f	language:Erlang	module:patch_prv
format_error	/home/daniil/projects/my/bump/src/bump_prv.erl	/^format_error(Reason) ->$/;"	f	language:Erlang	module:bump_prv
format_error	/home/daniil/projects/my/bump/src/major_prv.erl	/^format_error(Reason) ->$/;"	f	language:Erlang	module:major_prv
format_error	/home/daniil/projects/my/bump/src/minor_prv.erl	/^format_error(Reason) ->$/;"	f	language:Erlang	module:minor_prv
format_error	/home/daniil/projects/my/bump/src/patch_prv.erl	/^format_error(Reason) ->$/;"	f	language:Erlang	module:patch_prv
get_data	/home/daniil/projects/my/bump/src/bump_git.erl	/^get_data(Port, Sofar) ->$/;"	f	language:Erlang	module:bump_git
get_data	/home/daniil/projects/my/bump/src/git.erl	/^get_data(Port, Sofar) ->$/;"	f	language:Erlang	module:git
git	/home/daniil/projects/my/bump/src/git.erl	/^-module(git).$/;"	m	language:Erlang
inc_release_version	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^inc_release_version(File, Inc) ->$/;"	f	language:Erlang	module:bump_rebar
inc_release_version	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^inc_release_version(Inc, [Line | Lines], Found, Acc, Version) ->$/;"	f	language:Erlang	module:bump_rebar
inc_release_version	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^inc_release_version(_Inc, [], false, _Acc, _Version) ->$/;"	f	language:Erlang	module:bump_rebar
inc_release_version	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^inc_release_version(_Inc, [], true, Acc, Version) ->$/;"	f	language:Erlang	module:bump_rebar
init	/home/daniil/projects/my/bump/src/bump.erl	/^init(State) ->$/;"	f	language:Erlang
init	/home/daniil/projects/my/bump/src/bump_prv.erl	/^init(State) ->$/;"	f	language:Erlang	module:bump_prv
init	/home/daniil/projects/my/bump/src/major_prv.erl	/^init(State) ->$/;"	f	language:Erlang	module:major_prv
init	/home/daniil/projects/my/bump/src/minor_prv.erl	/^init(State) ->$/;"	f	language:Erlang	module:minor_prv
init	/home/daniil/projects/my/bump/src/patch_prv.erl	/^init(State) ->$/;"	f	language:Erlang	module:patch_prv
is_clean	/home/daniil/projects/my/bump/src/bump_git.erl	/^is_clean(Dir) ->$/;"	f	language:Erlang	module:bump_git
is_clean	/home/daniil/projects/my/bump/src/git.erl	/^is_clean(Dir) ->$/;"	f	language:Erlang	module:git
major_prv	/home/daniil/projects/my/bump/src/major_prv.erl	/^-module(major_prv).$/;"	m	language:Erlang
minor_prv	/home/daniil/projects/my/bump/src/minor_prv.erl	/^-module(minor_prv).$/;"	m	language:Erlang
my_exec	/home/daniil/projects/my/bump/src/bump_git.erl	/^my_exec(Command, Dir) ->$/;"	f	language:Erlang	module:bump_git
my_exec	/home/daniil/projects/my/bump/src/git.erl	/^my_exec(Command, Dir) ->$/;"	f	language:Erlang	module:git
parse_version	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^parse_version(Line) ->$/;"	f	language:Erlang	module:bump_rebar
patch_prv	/home/daniil/projects/my/bump/src/patch_prv.erl	/^-module(patch_prv).$/;"	m	language:Erlang
PROVIDER	/home/daniil/projects/my/bump/src/bump_prv.erl	/^-define(PROVIDER, 'bump').$/;"	d	language:Erlang
PROVIDER	/home/daniil/projects/my/bump/src/major_prv.erl	/^-define(PROVIDER, major).$/;"	d	language:Erlang
PROVIDER	/home/daniil/projects/my/bump/src/minor_prv.erl	/^-define(PROVIDER, minor).$/;"	d	language:Erlang
PROVIDER	/home/daniil/projects/my/bump/src/patch_prv.erl	/^-define(PROVIDER, patch).$/;"	d	language:Erlang
strip	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^strip(<<>>) ->$/;"	f	language:Erlang	module:bump_rebar
strip	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^strip(B) when is_binary(B) ->$/;"	f	language:Erlang	module:bump_rebar
strip	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^strip(B) when is_list(B) ->$/;"	f	language:Erlang	module:bump_rebar
tag	/home/daniil/projects/my/bump/src/bump_git.erl	/^tag(Message, Tag, Dir) ->$/;"	f	language:Erlang	module:bump_git
whitespace	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^whitespace($ )  -> true;$/;"	f	language:Erlang	module:bump_rebar
whitespace	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^whitespace($\\n) -> true;$/;"	f	language:Erlang	module:bump_rebar
whitespace	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^whitespace($\\r) -> true;$/;"	f	language:Erlang	module:bump_rebar
whitespace	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^whitespace($\\t) -> true;$/;"	f	language:Erlang	module:bump_rebar
whitespace	/home/daniil/projects/my/bump/src/bump_rebar.erl	/^whitespace(_)   -> false.$/;"	f	language:Erlang	module:bump_rebar
